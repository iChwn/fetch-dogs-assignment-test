{"version":3,"file":"static/js/249.dacbb845.chunk.js","mappings":"8OAsHA,UA5Gc,WACZ,IAAMA,GAAWC,EAAAA,EAAAA,MACjBC,GAAyCC,EAAAA,EAAAA,KAAjCC,EAAaF,EAAbE,cAAeC,EAAaH,EAAbG,cACvBC,GAA0BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/BI,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GACtBI,GAAsCL,EAAAA,EAAAA,UAAS,CAC7C,CACEM,MAAO,OACPC,YAAa,oBACbC,KAAM,OACNC,MAAO,GACPC,KAAM,OACNC,QAAS,GACTC,MAAOC,EAAAA,KAAaC,SAAS,qBAC7BX,MAAO,IAET,CACEG,MAAO,QACPC,YAAa,mBACbC,KAAM,OACNC,MAAO,GACPC,KAAM,QACNC,QAAS,GACTC,MAAOC,EAAAA,KAAaE,QAAQD,SAAS,sBACrCX,MAAO,MAETa,GAAAd,EAAAA,EAAAA,GAAAG,EAAA,GArBKY,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GA6ElC,OACEG,EAAAA,EAAAA,KAAA,OAAKC,UAAU,4DAA2DC,UACxEC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,oDAAmDC,SAAA,EAChEF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,sCAAqCC,SAAC,qCACnDlB,IAASgB,EAAAA,EAAAA,KAAA,KAAGC,UAAU,wCAAuCC,SAAElB,KAEhEgB,EAAAA,EAAAA,KAACI,EAAAA,GAAS,CACRC,SAAUP,EACVQ,SApDe,SAACC,GAEtB,OADmBA,EAAMC,OAAOnB,MAE9B,IAAK,OACL,IAAK,SAdiB,SAACkB,GACzB,IAAME,EAAYC,IAAAA,UAAYZ,GACxBa,EAAYJ,EAAMC,OAAOjB,KACzBqB,EAAaL,EAAMC,OAAOlB,MACboB,IAAAA,OAASD,GAAY,SAACI,GAAI,OAAKA,EAAKtB,OAASoB,CAAS,IAAE,GAC9DrB,MAAQsB,EAErBb,EAAeU,EACjB,CAOMK,CAAkBP,GAKxB,KA6CMP,EAAAA,EAAAA,KAAA,UACEe,QA5Ca,WACnB,IAAIN,EAAaC,IAAAA,UAAYZ,GACvBkB,EAAmB,WACvBP,EAAaA,EAAWQ,KAAI,SAAAC,GAAM,OAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAASD,GAAM,IAAElC,MAAO,IAAE,GAC9D,GAEAoC,EAAAA,EAAAA,GAAetB,GACduB,MAAK,SAACH,GACL,GAAqB,MAAlBA,EAAOI,OACRN,IACAjB,EAAeU,GACf/B,EAAc,CAACa,KAAMkB,EAAW,GAAGnB,MAAOM,MAAMa,EAAW,GAAGnB,QAAQ,SAACiC,GAC5C,OAAb,OAARA,QAAQ,IAARA,OAAQ,EAARA,EAAUD,UACZE,EAAAA,EAAAA,IAAU,OAAQ,SAAU,GAC5BlD,EAASmD,EAAAA,EAASC,UAElBzC,EAAS,+CAEb,QACK,CACL,IAAM0C,EAAYT,EAAOL,KACzBG,IACAY,OAAOC,KAAKF,GAAWG,SAAQ,SAAA9C,GACR0B,IAAAA,OAASD,GAAY,SAACI,GAAI,OAAKA,EAAKtB,OAASP,CAAK,IAAE,GAC5DA,MAAQ2C,EAAU3C,GAE/Be,EAAeU,EACjB,GACF,CACF,GACF,EAeQR,UAAU,mHACV8B,SAAUpD,EAAcuB,SAEvBvB,GACCqB,EAAAA,EAAAA,KAAA,QAAMC,UAAU,gFAEhB,cAMZ,C","sources":["page/authentication/index.tsx"],"sourcesContent":["import { routeUrl } from \"constant\";\r\nimport { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { setCookie } from \"utility/helper\";\r\nimport { useFetch } from \"utility/hooks/apiHooks/useFetch\";\r\nimport { InputForm } from \"components\"\r\nimport * as yup from \"yup\";\r\nimport handleValidate from \"utility/hooks/setupHooks/validationHook\";\r\nimport _ from \"lodash\"\r\n\r\nconst Login = () => {\r\n  const navigate = useNavigate();\r\n  const { loginProccess, isAuthLoading } = useFetch();\r\n  const [error, setError] = useState(\"\");\r\n  const [formToState, setFormToState] = useState([\r\n    {\r\n      title: \"Name\",\r\n      placeholder: \"e.g alexa andreas\",\r\n      type: \"text\",\r\n      value: \"\",\r\n      name: \"name\",\r\n      options: [],\r\n      rules: yup.string().required(\"Name is required!\"),\r\n      error: \"\"\r\n    }, \r\n    {\r\n      title: \"Email\",\r\n      placeholder: \"e.g test@123.com\",\r\n      type: \"text\",\r\n      value: \"\",\r\n      name: \"email\",\r\n      options: [],\r\n      rules: yup.string().email().required(\"Email is required!\"),\r\n      error: \"\"\r\n    }, \r\n  ])\r\n\r\n  const handleChangeField = (event) => {\r\n    const cloneForms =_.cloneDeep(formToState)\r\n    const eventName = event.target.name\r\n    const eventValue = event.target.value\r\n    let filteredForm = _.filter(cloneForms, (data) => data.name === eventName)[0]\r\n    filteredForm.value = eventValue\r\n      \r\n    setFormToState(cloneForms)\r\n  }\r\n\r\n  const handleOnChange = (event) => {\r\n    const targetType = event.target.type\r\n    switch (targetType) {\r\n      case \"text\":\r\n      case \"email\":\r\n        handleChangeField(event)\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  const handleSubmit = () => {\r\n    let cloneForms = _.cloneDeep(formToState)\r\n    const handleResetError = () => {\r\n      cloneForms = cloneForms.map(result => ({...result, error: \"\"}))\r\n    }\r\n\r\n    handleValidate(formToState)\r\n    .then((result) => {\r\n      if(result.status === 200) {\r\n        handleResetError()\r\n        setFormToState(cloneForms)\r\n        loginProccess({name: cloneForms[0].value, email:cloneForms[1].value}, (response) => {\r\n          if (response?.status === 200) {\r\n            setCookie('auth', \"signed\", 3)\r\n            navigate(routeUrl.dogList); \r\n          } else {\r\n            setError(\"Login failed. Please check your credentials.\");\r\n          }\r\n        })\r\n      } else {\r\n        const errorsObj = result.data\r\n        handleResetError()\r\n        Object.keys(errorsObj).forEach(error => {\r\n          const filteredForm = _.filter(cloneForms, (data) => data.name === error)[0]\r\n          filteredForm.error = errorsObj[error]\r\n\r\n          setFormToState(cloneForms)\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex min-h-screen justify-center items-center bg-gray-100\">\r\n      <div className=\"bg-white p-8 rounded-lg shadow-md w-full max-w-md\">\r\n        <h2 className=\"text-2xl font-bold text-center mb-6\">üê∂ Login to Fetch Dogs</h2>\r\n        {error && <p className=\"text-red-500 text-sm text-center mb-4\">{error}</p>}\r\n\r\n        <InputForm \r\n          formData={formToState}\r\n          onChange={handleOnChange}\r\n        />\r\n\r\n        <button\r\n          onClick={handleSubmit}\r\n          className=\"w-full bg-blue-500 text-white py-2 rounded-md hover:bg-blue-700 transition flex items-center justify-center mt-4\"\r\n          disabled={isAuthLoading}\r\n        >\r\n          {isAuthLoading ? (\r\n            <span className=\"animate-spin border-t-4 border-white border-solid h-5 w-5 rounded-full mr-2\"></span>\r\n          ) : (\r\n            \"Login\"\r\n          )}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"names":["navigate","useNavigate","_useFetch","useFetch","loginProccess","isAuthLoading","_useState","useState","_useState2","_slicedToArray","error","setError","_useState3","title","placeholder","type","value","name","options","rules","yup","required","email","_useState4","formToState","setFormToState","_jsx","className","children","_jsxs","InputForm","formData","onChange","event","target","cloneForms","_","eventName","eventValue","data","handleChangeField","onClick","handleResetError","map","result","_objectSpread","handleValidate","then","status","response","setCookie","routeUrl","dogList","errorsObj","Object","keys","forEach","disabled"],"sourceRoot":""}